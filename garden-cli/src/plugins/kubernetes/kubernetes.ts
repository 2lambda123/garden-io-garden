/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import * as Joi from "joi"
import {
  joiIdentifier,
  validate,
} from "../../config/common"
import {
  GardenPlugin,
  Provider,
} from "../../types/plugin/plugin"
import {
  ProviderConfig,
  providerConfigBase,
} from "../../config/project"

import {
  configureEnvironment,
  deleteConfig,
  destroyEnvironment,
  execInService,
  getConfig,
  getEnvironmentStatus,
  getServiceLogs,
  getServiceOutputs,
  getTestResult,
  setConfig,
  testModule,
  getLoginStatus,
  login,
  logout,
  runModule,
} from "./actions"
import { deployContainerService, getContainerServiceStatus } from "./deployment"
import { helmHandlers } from "./helm"
import { joiArray } from "../../config/common"
import dedent = require("dedent")

export const name = "kubernetes"

export interface IngressTlsSecret {
  name: string
  namespace: string
}

export interface IngressDomain {
  name: string
  tlsSecrets: IngressTlsSecret[]
}

export interface KubernetesConfig extends ProviderConfig {
  context: string
  ingressDomains: IngressDomain[]
  ingressPort: number
  ingressClass: string
  namespace?: string
  defaultUsername?: string
}

export interface KubernetesProvider extends Provider<KubernetesConfig> { }

const tlsSecret = Joi.object()
  .keys({
    name: joiIdentifier()
      .required()
      .description("The name of the Kubernetes secret that contains the TLS certificate and key for the domain."),
    // note: the secret is copied to each namespace that requires it
    namespace: joiIdentifier()
      .default("default")
      .description("The namespace where the TLS secret is stored."),
  })
  // TODO: allow specifying wildcard certs separately from main domain certs
  .description("Reference to a Kubernetes secret that contains the TLS certificate and key.")

const ingressDomainSchema = Joi.object()
  .keys({
    name: Joi.string()
      .required()
      .hostname()
      .description(
        "Valid RFC1123 DNS hostname that points to this cluster. " +
        "Services may be configured to add a subdomain to this hostname.",
    ),
    tlsSecrets: joiArray(tlsSecret)
      .description(dedent`
        References to Kubernetes secrets that contain a TLS certificate and key for the domain.

        Note that because services may be created under subdomains of this domain, you should include
        certificates for both the domain itself, and a wildcard certificate for its subdomains.

        Alternatively you _could_ include individual certs for each of the subdomains that you'll
        use, but that would usually amount to much more admin work.
    `),
  })

const ingressDomainsSchema = Joi.array().items(ingressDomainSchema)
  .required()
  .min(1)
  .description("One or more domains to configure for the cluster's ingress.")

const kubernetesConfigBase = providerConfigBase
  .keys({
    context: Joi.string()
      .required()
      .description("The kubectl context to use to connect to the Kubernetes cluster."),
    defaultUsername: joiIdentifier()
      .description("Set a default username (used for namespacing within a cluster)."),
    namespace: Joi.string()
      .description(
        "Specify which namespace to deploy services to (auto-generated by default). " +
        "Note that the framework generates other namespaces as well with this name as a prefix.",
      ),
    ingressDomains: ingressDomainsSchema,
  })

const configSchema = kubernetesConfigBase
  .keys({
    ingressDomains: ingressDomainsSchema
      .required(),
    ingressClass: Joi.string()
      .default("nginx")
      .description(dedent`
        The ingress class to use on configured Ingresses when deploying services. **Note that Garden
        currently only supports the nginx ingress controller.**
      `),
    ingressPort: Joi.number()
      .default(80)
      .description("The external port of the cluster's ingress controller."),
    _system: Joi.any().meta({ internal: true }),
  })

export function gardenPlugin({ config }: { config: KubernetesConfig }): GardenPlugin {
  config = validate(config, configSchema, { context: "kubernetes provider config" })

  return {
    config,
    actions: {
      getEnvironmentStatus,
      configureEnvironment,
      destroyEnvironment,
      getConfig,
      setConfig,
      deleteConfig,
      getLoginStatus,
      login,
      logout,
    },
    moduleActions: {
      container: {
        getServiceStatus: getContainerServiceStatus,
        deployService: deployContainerService,
        getServiceOutputs,
        execInService,
        runModule,
        testModule,
        getTestResult,
        getServiceLogs,
      },
      helm: helmHandlers,
    },
  }
}
