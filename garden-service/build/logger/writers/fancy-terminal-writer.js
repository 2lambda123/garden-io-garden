"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ansiEscapes = require("ansi-escapes");
const cliCursor = require("cli-cursor");
const elegantSpinner = require("elegant-spinner");
const wrapAnsi = require("wrap-ansi");
const chalk_1 = require("chalk");
const renderers_1 = require("../renderers");
const util_1 = require("../util");
const base_1 = require("./base");
const INTERVAL_MS = 60;
const THROTTLE_MS = 600;
const spinnerStyle = chalk_1.default.cyan;
class FancyTerminalWriter extends base_1.Writer {
    constructor(config = {}) {
        super(config);
        this.intervalID = null;
        this.spinners = {}; // Each entry has it's own spinner
        this.prevOutput = [];
        this.lastInterceptAt = null;
        this.updatePending = false;
    }
    initStream(logger) {
        // Create custom stream that calls write method with the 'noIntercept' option.
        const stream = Object.assign({}, process.stdout, { write: (str, enc, cb) => process.stdout.write(str, enc, cb, { noIntercept: true }) });
        const onIntercept = msg => logger.info({ msg, fromStdStream: true });
        const restoreStreamFns = [
            util_1.interceptStream(process.stdout, onIntercept),
            util_1.interceptStream(process.stderr, onIntercept),
        ];
        stream.cleanUp = () => {
            cliCursor.show(this.stream);
            restoreStreamFns.forEach(restoreStream => restoreStream());
        };
        return stream;
    }
    spin(entries, totalLines) {
        entries.forEach(e => {
            let out = "";
            const [x, y] = e.spinnerCoords;
            const termX = x === 0 ? x : x + 1;
            const termY = -(totalLines - y - 1);
            out += ansiEscapes.cursorSavePosition;
            out += ansiEscapes.cursorTo(0); // Ensure cursor is to the left
            out += ansiEscapes.cursorMove(termX, termY);
            out += spinnerStyle(this.tickSpinner(e.key));
            out += ansiEscapes.cursorRestorePosition;
            this.stream.write(out);
        });
    }
    startLoop(entries, totalLines) {
        this.stopLoop();
        this.intervalID = setInterval(() => this.spin(entries, totalLines), INTERVAL_MS);
    }
    stopLoop() {
        if (this.intervalID) {
            clearInterval(this.intervalID);
            this.intervalID = null;
        }
    }
    tickSpinner(key) {
        if (!this.spinners[key]) {
            this.spinners[key] = elegantSpinner();
        }
        return this.spinners[key]();
    }
    write(output, nextEntry) {
        cliCursor.hide(this.stream);
        const lineNumber = output.length >= this.prevOutput.length ? nextEntry.lineNumber : 0;
        const nLinesToErase = this.prevOutput.length - lineNumber;
        this.stream.write(ansiEscapes.eraseLines(nLinesToErase) + output.slice(lineNumber).join("\n"));
    }
    handleGraphChange(logEntry, logger, didWrite = false) {
        this.updatePending = false;
        // Suspend processing and write immediately if a lot of data is being intercepted, e.g. when user is typing in input
        if (logEntry.fromStdStream() && !didWrite) {
            const now = Date.now();
            const throttleProcessing = this.lastInterceptAt && (now - this.lastInterceptAt) < THROTTLE_MS;
            this.lastInterceptAt = now;
            if (throttleProcessing) {
                this.stopLoop();
                this.stream.write(renderers_1.renderMsg(logEntry));
                this.updatePending = true;
                // Resume processing if idle and original update is still pending
                setTimeout(() => {
                    if (this.updatePending) {
                        this.handleGraphChange(logEntry, logger, true);
                    }
                }, THROTTLE_MS);
                return;
            }
        }
        const terminalEntries = this.toTerminalEntries(logger);
        const nextEntry = terminalEntries.find(e => e.key === logEntry.key);
        // Nothing to do, e.g. because entry level is higher than writer level
        if (!nextEntry) {
            return;
        }
        const output = this.render(terminalEntries);
        if (!didWrite) {
            this.write(output, nextEntry);
        }
        const entriesWithspinner = terminalEntries.filter(e => e.spinnerCoords);
        if (entriesWithspinner.length > 0) {
            this.startLoop(entriesWithspinner, output.length);
        }
        else {
            this.stopLoop();
        }
        this.prevOutput = output;
    }
    toTerminalEntries(logger) {
        const level = this.level || logger.level;
        let currentLineNumber = 0;
        return util_1.getChildEntries(logger)
            .filter(entry => util_1.validate(level, entry))
            .reduce((acc, entry) => {
            let spinnerFrame = "";
            let spinnerX;
            let spinnerCoords;
            if (entry.opts.status === "active") {
                spinnerX = renderers_1.leftPad(entry).length;
                spinnerFrame = this.tickSpinner(entry.key);
                spinnerCoords = [spinnerX, currentLineNumber];
            }
            else {
                delete this.spinners[entry.key];
            }
            const text = [entry]
                .map(e => (e.fromStdStream()
                ? renderers_1.renderMsg(e)
                : renderers_1.formatForTerminal(e)))
                .map(str => (spinnerFrame
                ? `${str.slice(0, spinnerX)}${spinnerStyle(spinnerFrame)} ${str.slice(spinnerX)}`
                : str))
                .map(str => wrapAnsi(str, util_1.getTerminalWidth(this.stream), {
                trim: false,
                hard: true,
                wordWrap: false,
            }))
                .pop();
            acc.push({
                key: entry.key,
                lineNumber: currentLineNumber,
                spinnerCoords,
                text,
            });
            currentLineNumber += text.split("\n").length - 1;
            return acc;
        }, []);
    }
    render(terminalEntries) {
        return terminalEntries.map(e => e.text).join("").split("\n");
    }
    onGraphChange(logEntry, logger) {
        if (!this.stream) {
            this.stream = this.initStream(logger);
        }
        this.handleGraphChange(logEntry, logger, false);
    }
    stop() {
        this.stopLoop();
        this.stream && this.stream.cleanUp();
    }
}
exports.FancyTerminalWriter = FancyTerminalWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
