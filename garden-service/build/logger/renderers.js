"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logSymbols = require("log-symbols");
const nodeEmoji = require("node-emoji");
const yaml = require("js-yaml");
const chalk_1 = require("chalk");
const lodash_1 = require("lodash");
const cliTruncate = require("cli-truncate");
const stringWidth = require("string-width");
const hasAnsi = require("has-ansi");
/*** STYLE HELPERS ***/
const SECTION_PREFIX_WIDTH = 25;
const cliPadEnd = (s, width) => {
    const diff = width - stringWidth(s);
    return diff <= 0 ? s : s + lodash_1.repeat(" ", diff);
};
const truncateSection = (s) => cliTruncate(s, SECTION_PREFIX_WIDTH);
const sectionStyle = (s) => chalk_1.default.cyan.italic(cliPadEnd(truncateSection(s), SECTION_PREFIX_WIDTH));
exports.msgStyle = (s) => hasAnsi(s) ? s : chalk_1.default.gray(s);
exports.errorStyle = chalk_1.default.red;
/*** RENDER HELPERS ***/
function insertVal(out, idx, toRender, renderArgs) {
    out[idx] = typeof toRender === "string" ? toRender : toRender(...renderArgs);
    return out;
}
// Creates a chain of renderers that each receives the updated output array along with the provided parameters
function applyRenderers(renderers) {
    const curried = renderers.map(([toRender, renderArgs], idx) => {
        const args = [idx, toRender, renderArgs];
        // FIXME Currying like this throws "Expected 0-4 arguments, but got 0 or more"
        return lodash_1.curryRight(insertVal)(...args);
    });
    return lodash_1.flow(curried);
}
function combine(renderers) {
    const initOutput = [];
    return applyRenderers(renderers)(initOutput).join("");
}
exports.combine = combine;
/*** RENDERERS ***/
function leftPad(entry) {
    return lodash_1.padStart("", (entry.opts.indentationLevel || 0) * 3);
}
exports.leftPad = leftPad;
function renderEmoji(entry) {
    const { emoji } = entry.opts;
    if (emoji && nodeEmoji.hasEmoji(emoji)) {
        return `${nodeEmoji.get(emoji)}  `;
    }
    return "";
}
exports.renderEmoji = renderEmoji;
function renderError(entry) {
    const { msg, error } = entry.opts;
    if (error) {
        const { detail, message, stack } = error;
        let out = stack || message;
        if (!lodash_1.isEmpty(detail)) {
            const kebabCasedDetail = lodash_1.reduce(detail, (acc, val, key) => {
                acc[lodash_1.kebabCase(key)] = val;
                return acc;
            }, {});
            const yamlDetail = yaml.safeDump(kebabCasedDetail, { noRefs: true, skipInvalid: true });
            out += `\nError Details:\n${yamlDetail}`;
        }
        return out;
    }
    return msg || "";
}
exports.renderError = renderError;
function renderSymbol(entry) {
    const { symbol } = entry.opts;
    if (symbol === "empty") {
        return " ";
    }
    return symbol ? `${logSymbols[symbol]} ` : "";
}
exports.renderSymbol = renderSymbol;
function renderMsg(entry) {
    const { fromStdStream, msg, status } = entry.opts;
    if (fromStdStream) {
        return lodash_1.isArray(msg) ? msg.join(" ") : msg || "";
    }
    const styleFn = status === "error" ? exports.errorStyle : exports.msgStyle;
    if (lodash_1.isArray(msg)) {
        // We apply the style function to each item (as opposed to the entire string) in case some
        // part of the message already has a style
        return msg.map(str => styleFn(str)).join(styleFn(" → "));
    }
    return msg ? styleFn(msg) : "";
}
exports.renderMsg = renderMsg;
function renderSection(entry) {
    const { section } = entry.opts;
    return section ? `${sectionStyle(section)} → ` : "";
}
exports.renderSection = renderSection;
function renderDuration(entry) {
    const { showDuration = false } = entry.opts;
    return showDuration
        ? exports.msgStyle(` (finished in ${entry.getDuration()}s)`)
        : "";
}
exports.renderDuration = renderDuration;
function formatForTerminal(entry) {
    return combine([
        [leftPad, [entry]],
        [renderSymbol, [entry]],
        [renderSection, [entry]],
        [renderEmoji, [entry]],
        [renderMsg, [entry]],
        [renderDuration, [entry]],
        ["\n"],
    ]);
}
exports.formatForTerminal = formatForTerminal;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
