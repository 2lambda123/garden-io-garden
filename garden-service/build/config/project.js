"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Joi = require("joi");
const js_yaml_1 = require("js-yaml");
const common_1 = require("./common");
exports.providerConfigBaseSchema = Joi.object()
    .keys({
    name: common_1.joiIdentifier().required()
        .description("The name of the provider plugin to configure.")
        .example("local-kubernetes"),
})
    .unknown(true)
    .meta({ extendable: true });
exports.environmentConfigSchema = Joi.object()
    .keys({
    providers: common_1.joiArray(exports.providerConfigBaseSchema)
        .unique("name")
        .description("A list of providers that should be used for this environment, and their configuration. " +
        "Please refer to individual plugins/providers for details on how to configure them."),
    variables: common_1.joiVariables()
        .description("A key/value map of variables that modules can reference when using this environment."),
});
exports.environmentSchema = exports.environmentConfigSchema
    .keys({
    name: Joi.string()
        .required()
        .description("The name of the current environment."),
});
exports.projectSourceSchema = Joi.object()
    .keys({
    name: common_1.joiIdentifier()
        .required()
        .description("The name of the source to import"),
    repositoryUrl: common_1.joiRepositoryUrl()
        .required(),
});
exports.projectSourcesSchema = common_1.joiArray(exports.projectSourceSchema)
    .unique("name")
    .description("A list of remote sources to import into project");
exports.defaultProviders = [
    { name: "container" },
];
exports.defaultEnvironments = [
    {
        name: "local",
        providers: [
            {
                name: "local-kubernetes",
            },
        ],
        variables: {},
    },
];
const environmentDefaults = {
    providers: [],
    variables: {},
};
exports.projectNameSchema = common_1.joiIdentifier()
    .required()
    .description("The name of the project.")
    .example("my-sweet-project");
exports.projectSchema = Joi.object()
    .keys({
    name: exports.projectNameSchema,
    defaultEnvironment: Joi.string()
        .default("", "<first specified environment>")
        .description("The default environment to use when calling commands without the `--env` parameter."),
    environmentDefaults: exports.environmentConfigSchema
        .default(() => environmentDefaults, js_yaml_1.safeDump(environmentDefaults))
        .example(environmentDefaults)
        .description("Default environment settings, that are inherited (but can be overridden) by each configured environment"),
    environments: common_1.joiArray(exports.environmentConfigSchema.keys({ name: common_1.joiIdentifier().required() }))
        .unique("name")
        .default(() => (Object.assign({}, exports.defaultEnvironments)), js_yaml_1.safeDump(exports.defaultEnvironments))
        .description("A list of environments to configure for the project.")
        .example(exports.defaultEnvironments),
    sources: exports.projectSourcesSchema,
})
    .required()
    .description("The configuration for a Garden project. This should be specified in the garden.yml file in your project root.");
// this is used for default handlers in the action handler
exports.defaultProvider = {
    name: "_default",
    config: {},
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
