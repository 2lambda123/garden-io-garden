"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const lodash_1 = require("lodash");
const exceptions_1 = require("../exceptions");
// Parameter types T which map between the Parameter<T> class and the Sywac cli library.
// In case we add types that aren't supported natively by Sywac, see: http://sywac.io/docs/sync-config.html#custom
const VALID_PARAMETER_TYPES = ["boolean", "number", "choice", "string", "array:string", "path", "array:path"];
exports.styleConfig = {
    usagePrefix: str => (`
${chalk_1.default.bold(str.slice(0, 5).toUpperCase())}
  ${chalk_1.default.italic(str.slice(7))}`),
    usageCommandPlaceholder: str => chalk_1.default.blue(str),
    usagePositionals: str => chalk_1.default.magenta(str),
    usageArgsPlaceholder: str => chalk_1.default.magenta(str),
    usageOptionsPlaceholder: str => chalk_1.default.yellow(str),
    group: (str) => {
        const cleaned = str.endsWith(":") ? str.slice(0, -1) : str;
        return chalk_1.default.bold(cleaned.toUpperCase());
    },
    flags: (str, _type) => {
        const style = str.startsWith("-") ? chalk_1.default.green : chalk_1.default.magenta;
        return style(str);
    },
    hints: str => chalk_1.default.gray(str),
    groupError: str => chalk_1.default.red.bold(str),
    flagsError: str => chalk_1.default.red.bold(str),
    descError: str => chalk_1.default.yellow.bold(str),
    hintsError: str => chalk_1.default.red(str),
    messages: str => chalk_1.default.red.bold(str),
};
// Helper functions
exports.getKeys = (obj) => Object.keys(obj || {});
exports.filterByKeys = (obj, keys) => {
    return keys.reduce((memo, key) => {
        if (obj[key]) {
            memo[key] = obj[key];
        }
        return memo;
    }, {});
};
/**
 * Returns the params that need to be overridden set to false
 */
function falsifyConflictingParams(argv, params) {
    return lodash_1.reduce(argv, (acc, val, key) => {
        const param = params[key];
        const overrides = (param || {}).overrides || [];
        // argv always contains the "_" key which is irrelevant here
        if (key === "_" || !param || !val || !(overrides.length > 0)) {
            return acc;
        }
        const withAliases = overrides.reduce((_, keyToOverride) => {
            if (!params[keyToOverride]) {
                throw new exceptions_1.InternalError(`Cannot override non-existing parameter: ${keyToOverride}`, {
                    keyToOverride,
                    availableKeys: Object.keys(params),
                });
            }
            return [keyToOverride, ...params[keyToOverride].alias];
        }, []);
        withAliases.forEach(keyToOverride => acc[keyToOverride] = false);
        return acc;
    }, {});
}
exports.falsifyConflictingParams = falsifyConflictingParams;
// Sywac specific transformers and helpers
function getOptionSynopsis(key, { alias }) {
    if (alias && alias.length > 1) {
        throw new exceptions_1.InternalError("Option aliases can only be a single character", {
            optionName: key,
            alias,
        });
    }
    return alias ? `-${alias}, --${key}` : `--${key}`;
}
exports.getOptionSynopsis = getOptionSynopsis;
function getArgSynopsis(key, param) {
    return param.required ? `<${key}>` : `[${key}]`;
}
exports.getArgSynopsis = getArgSynopsis;
function prepareArgConfig(param) {
    return {
        desc: param.help,
        params: [prepareOptionConfig(param)],
    };
}
exports.prepareArgConfig = prepareArgConfig;
function prepareOptionConfig(param) {
    const { coerce, defaultValue, help: desc, hints, required, type, } = param;
    if (!VALID_PARAMETER_TYPES.includes(type)) {
        throw new exceptions_1.InternalError(`Invalid parameter type for cli: ${type}`, {
            type,
            validParameterTypes: VALID_PARAMETER_TYPES,
        });
    }
    let config = {
        coerce,
        defaultValue,
        desc,
        required,
        type,
        hints,
        strict: true,
        mustExist: true,
    };
    if (type === "choice") {
        config.type = "enum";
        config.choices = param.choices;
    }
    return config;
}
exports.prepareOptionConfig = prepareOptionConfig;
function failOnInvalidOptions(argv, ctx) {
    const validOptions = lodash_1.flatten(ctx.details.types
        .filter(t => t.datatype !== "command")
        .map(t => t.aliases));
    const receivedOptions = Object.keys(argv);
    const invalid = lodash_1.difference(receivedOptions, validOptions);
    if (invalid.length > 0) {
        ctx.cliMessage(`Received invalid flag(s): ${invalid.join(", ")}`);
    }
}
exports.failOnInvalidOptions = failOnInvalidOptions;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
