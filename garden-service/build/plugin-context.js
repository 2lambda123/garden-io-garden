"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const Joi = require("joi");
const project_1 = require("./config/project");
const common_1 = require("./config/common");
const exceptions_1 = require("./exceptions");
const project_2 = require("./config/project");
const providerSchema = Joi.object()
    .options({ presence: "required" })
    .keys({
    name: common_1.joiIdentifier()
        .description("The name of the provider (plugin)."),
    config: project_1.providerConfigBaseSchema,
});
// NOTE: this is used more for documentation than validation, outside of internal testing
// TODO: validate the output from createPluginContext against this schema (in tests)
exports.pluginContextSchema = Joi.object()
    .options({ presence: "required" })
    .keys({
    projectName: project_1.projectNameSchema,
    projectRoot: Joi.string()
        .uri({ relativeOnly: true })
        .description("The absolute path of the project root."),
    projectSources: project_1.projectSourcesSchema,
    localConfigStore: Joi.object()
        .description("Helper class for managing local configuration for plugins."),
    environment: project_1.environmentSchema,
    provider: providerSchema
        .description("The provider being used for this context."),
    providers: common_1.joiIdentifierMap(providerSchema)
        .description("Map of all configured providers for the current environment and project."),
});
function createPluginContext(garden, providerName) {
    const projectConfig = lodash_1.cloneDeep(garden.environment);
    const providerConfigs = lodash_1.keyBy(projectConfig.providers, "name");
    const providers = lodash_1.mapValues(providerConfigs, (config, name) => ({ name, config }));
    let provider = providers[providerName];
    if (providerName === "_default") {
        provider = project_2.defaultProvider;
    }
    if (!provider) {
        throw new exceptions_1.PluginError(`Could not find provider '${providerName}'`, { providerName, providers });
    }
    return {
        projectName: garden.projectName,
        projectRoot: garden.projectRoot,
        projectSources: lodash_1.cloneDeep(garden.projectSources),
        environment: projectConfig,
        localConfigStore: garden.localConfigStore,
        provider,
        providers,
    };
}
exports.createPluginContext = createPluginContext;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbi1jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7O0FBR0gsbUNBQW9EO0FBQ3BELDJCQUEwQjtBQUMxQiw4Q0FNeUI7QUFDekIsNENBQWlFO0FBQ2pFLDZDQUEwQztBQUMxQyw4Q0FBa0Q7QUFXbEQsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRTtLQUNoQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUM7S0FDakMsSUFBSSxDQUFDO0lBQ0osSUFBSSxFQUFFLHNCQUFhLEVBQUU7U0FDbEIsV0FBVyxDQUFDLG9DQUFvQyxDQUFDO0lBQ3BELE1BQU0sRUFBRSxrQ0FBd0I7Q0FDakMsQ0FBQyxDQUFBO0FBT0oseUZBQXlGO0FBQ3pGLG9GQUFvRjtBQUN2RSxRQUFBLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUU7S0FDNUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDO0tBQ2pDLElBQUksQ0FBQztJQUNKLFdBQVcsRUFBRSwyQkFBaUI7SUFDOUIsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7U0FDdEIsR0FBRyxDQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2hDLFdBQVcsQ0FBQyx3Q0FBd0MsQ0FBQztJQUN4RCxjQUFjLEVBQUUsOEJBQW9CO0lBQ3BDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7U0FDM0IsV0FBVyxDQUFDLDREQUE0RCxDQUFDO0lBQzVFLFdBQVcsRUFBRSwyQkFBaUI7SUFDOUIsUUFBUSxFQUFFLGNBQWM7U0FDckIsV0FBVyxDQUFDLDJDQUEyQyxDQUFDO0lBQzNELFNBQVMsRUFBRSx5QkFBZ0IsQ0FBQyxjQUFjLENBQUM7U0FDeEMsV0FBVyxDQUFDLDBFQUEwRSxDQUFDO0NBQzNGLENBQUMsQ0FBQTtBQUVKLFNBQWdCLG1CQUFtQixDQUFDLE1BQWMsRUFBRSxZQUFvQjtJQUN0RSxNQUFNLGFBQWEsR0FBRyxrQkFBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNuRCxNQUFNLGVBQWUsR0FBRyxjQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUM5RCxNQUFNLFNBQVMsR0FBRyxrQkFBUyxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xGLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUV0QyxJQUFJLFlBQVksS0FBSyxVQUFVLEVBQUU7UUFDL0IsUUFBUSxHQUFHLHlCQUFlLENBQUE7S0FDM0I7SUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsTUFBTSxJQUFJLHdCQUFXLENBQUMsNEJBQTRCLFlBQVksR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUE7S0FDaEc7SUFFRCxPQUFPO1FBQ0wsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXO1FBQy9CLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVztRQUMvQixjQUFjLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQ2hELFdBQVcsRUFBRSxhQUFhO1FBQzFCLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0I7UUFDekMsUUFBUTtRQUNSLFNBQVM7S0FDVixDQUFBO0FBQ0gsQ0FBQztBQXZCRCxrREF1QkMiLCJmaWxlIjoicGx1Z2luLWNvbnRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE4IEdhcmRlbiBUZWNobm9sb2dpZXMsIEluYy4gPGluZm9AZ2FyZGVuLmlvPlxuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKi9cblxuaW1wb3J0IHsgR2FyZGVuIH0gZnJvbSBcIi4vZ2FyZGVuXCJcbmltcG9ydCB7IG1hcFZhbHVlcywga2V5QnksIGNsb25lRGVlcCB9IGZyb20gXCJsb2Rhc2hcIlxuaW1wb3J0ICogYXMgSm9pIGZyb20gXCJqb2lcIlxuaW1wb3J0IHtcbiAgUHJvdmlkZXIsXG4gIHByb2plY3ROYW1lU2NoZW1hLFxuICBwcm9qZWN0U291cmNlc1NjaGVtYSxcbiAgZW52aXJvbm1lbnRTY2hlbWEsXG4gIHByb3ZpZGVyQ29uZmlnQmFzZVNjaGVtYSxcbn0gZnJvbSBcIi4vY29uZmlnL3Byb2plY3RcIlxuaW1wb3J0IHsgam9pSWRlbnRpZmllciwgam9pSWRlbnRpZmllck1hcCB9IGZyb20gXCIuL2NvbmZpZy9jb21tb25cIlxuaW1wb3J0IHsgUGx1Z2luRXJyb3IgfSBmcm9tIFwiLi9leGNlcHRpb25zXCJcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlciB9IGZyb20gXCIuL2NvbmZpZy9wcm9qZWN0XCJcblxudHlwZSBXcmFwcGVkRnJvbUdhcmRlbiA9IFBpY2s8R2FyZGVuLFxuICBcInByb2plY3ROYW1lXCIgfFxuICBcInByb2plY3RSb290XCIgfFxuICBcInByb2plY3RTb3VyY2VzXCIgfFxuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBmcm9tIHRoZSBpbnRlcmZhY2VcbiAgXCJsb2NhbENvbmZpZ1N0b3JlXCIgfFxuICBcImVudmlyb25tZW50XCJcbiAgPlxuXG5jb25zdCBwcm92aWRlclNjaGVtYSA9IEpvaS5vYmplY3QoKVxuICAub3B0aW9ucyh7IHByZXNlbmNlOiBcInJlcXVpcmVkXCIgfSlcbiAgLmtleXMoe1xuICAgIG5hbWU6IGpvaUlkZW50aWZpZXIoKVxuICAgICAgLmRlc2NyaXB0aW9uKFwiVGhlIG5hbWUgb2YgdGhlIHByb3ZpZGVyIChwbHVnaW4pLlwiKSxcbiAgICBjb25maWc6IHByb3ZpZGVyQ29uZmlnQmFzZVNjaGVtYSxcbiAgfSlcblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5Db250ZXh0IGV4dGVuZHMgV3JhcHBlZEZyb21HYXJkZW4ge1xuICBwcm92aWRlcjogUHJvdmlkZXJcbiAgcHJvdmlkZXJzOiB7IFtuYW1lOiBzdHJpbmddOiBQcm92aWRlciB9XG59XG5cbi8vIE5PVEU6IHRoaXMgaXMgdXNlZCBtb3JlIGZvciBkb2N1bWVudGF0aW9uIHRoYW4gdmFsaWRhdGlvbiwgb3V0c2lkZSBvZiBpbnRlcm5hbCB0ZXN0aW5nXG4vLyBUT0RPOiB2YWxpZGF0ZSB0aGUgb3V0cHV0IGZyb20gY3JlYXRlUGx1Z2luQ29udGV4dCBhZ2FpbnN0IHRoaXMgc2NoZW1hIChpbiB0ZXN0cylcbmV4cG9ydCBjb25zdCBwbHVnaW5Db250ZXh0U2NoZW1hID0gSm9pLm9iamVjdCgpXG4gIC5vcHRpb25zKHsgcHJlc2VuY2U6IFwicmVxdWlyZWRcIiB9KVxuICAua2V5cyh7XG4gICAgcHJvamVjdE5hbWU6IHByb2plY3ROYW1lU2NoZW1hLFxuICAgIHByb2plY3RSb290OiBKb2kuc3RyaW5nKClcbiAgICAgIC51cmkoPGFueT57IHJlbGF0aXZlT25seTogdHJ1ZSB9KVxuICAgICAgLmRlc2NyaXB0aW9uKFwiVGhlIGFic29sdXRlIHBhdGggb2YgdGhlIHByb2plY3Qgcm9vdC5cIiksXG4gICAgcHJvamVjdFNvdXJjZXM6IHByb2plY3RTb3VyY2VzU2NoZW1hLFxuICAgIGxvY2FsQ29uZmlnU3RvcmU6IEpvaS5vYmplY3QoKVxuICAgICAgLmRlc2NyaXB0aW9uKFwiSGVscGVyIGNsYXNzIGZvciBtYW5hZ2luZyBsb2NhbCBjb25maWd1cmF0aW9uIGZvciBwbHVnaW5zLlwiKSxcbiAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRTY2hlbWEsXG4gICAgcHJvdmlkZXI6IHByb3ZpZGVyU2NoZW1hXG4gICAgICAuZGVzY3JpcHRpb24oXCJUaGUgcHJvdmlkZXIgYmVpbmcgdXNlZCBmb3IgdGhpcyBjb250ZXh0LlwiKSxcbiAgICBwcm92aWRlcnM6IGpvaUlkZW50aWZpZXJNYXAocHJvdmlkZXJTY2hlbWEpXG4gICAgICAuZGVzY3JpcHRpb24oXCJNYXAgb2YgYWxsIGNvbmZpZ3VyZWQgcHJvdmlkZXJzIGZvciB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBhbmQgcHJvamVjdC5cIiksXG4gIH0pXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQbHVnaW5Db250ZXh0KGdhcmRlbjogR2FyZGVuLCBwcm92aWRlck5hbWU6IHN0cmluZyk6IFBsdWdpbkNvbnRleHQge1xuICBjb25zdCBwcm9qZWN0Q29uZmlnID0gY2xvbmVEZWVwKGdhcmRlbi5lbnZpcm9ubWVudClcbiAgY29uc3QgcHJvdmlkZXJDb25maWdzID0ga2V5QnkocHJvamVjdENvbmZpZy5wcm92aWRlcnMsIFwibmFtZVwiKVxuICBjb25zdCBwcm92aWRlcnMgPSBtYXBWYWx1ZXMocHJvdmlkZXJDb25maWdzLCAoY29uZmlnLCBuYW1lKSA9PiAoeyBuYW1lLCBjb25maWcgfSkpXG4gIGxldCBwcm92aWRlciA9IHByb3ZpZGVyc1twcm92aWRlck5hbWVdXG5cbiAgaWYgKHByb3ZpZGVyTmFtZSA9PT0gXCJfZGVmYXVsdFwiKSB7XG4gICAgcHJvdmlkZXIgPSBkZWZhdWx0UHJvdmlkZXJcbiAgfVxuXG4gIGlmICghcHJvdmlkZXIpIHtcbiAgICB0aHJvdyBuZXcgUGx1Z2luRXJyb3IoYENvdWxkIG5vdCBmaW5kIHByb3ZpZGVyICcke3Byb3ZpZGVyTmFtZX0nYCwgeyBwcm92aWRlck5hbWUsIHByb3ZpZGVycyB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9qZWN0TmFtZTogZ2FyZGVuLnByb2plY3ROYW1lLFxuICAgIHByb2plY3RSb290OiBnYXJkZW4ucHJvamVjdFJvb3QsXG4gICAgcHJvamVjdFNvdXJjZXM6IGNsb25lRGVlcChnYXJkZW4ucHJvamVjdFNvdXJjZXMpLFxuICAgIGVudmlyb25tZW50OiBwcm9qZWN0Q29uZmlnLFxuICAgIGxvY2FsQ29uZmlnU3RvcmU6IGdhcmRlbi5sb2NhbENvbmZpZ1N0b3JlLFxuICAgIHByb3ZpZGVyLFxuICAgIHByb3ZpZGVycyxcbiAgfVxufVxuIl19
