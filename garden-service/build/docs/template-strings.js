"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const config_1 = require("./config");
const config_context_1 = require("../config/config-context");
const fs_1 = require("fs");
const handlebars = require("handlebars");
function generateTemplateStringReferenceDocs(docsRoot) {
    const referenceDir = path_1.resolve(docsRoot, "reference");
    const outputPath = path_1.resolve(referenceDir, "template-strings.md");
    const projectContext = config_1.renderSchemaDescription(config_context_1.ProjectConfigContext.getSchema().describe(), { required: false });
    const moduleContext = config_1.renderSchemaDescription(config_context_1.ModuleConfigContext.getSchema().describe(), { required: false });
    const templatePath = path_1.resolve(__dirname, "templates", "template-strings.hbs");
    const template = handlebars.compile(fs_1.readFileSync(templatePath).toString());
    const markdown = template({ projectContext, moduleContext });
    fs_1.writeFileSync(outputPath, markdown);
}
exports.generateTemplateStringReferenceDocs = generateTemplateStringReferenceDocs;
if (require.main === module) {
    generateTemplateStringReferenceDocs(path_1.resolve(__dirname, "..", "..", "..", "docs"));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvY3MvdGVtcGxhdGUtc3RyaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILCtCQUE4QjtBQUM5QixxQ0FBa0Q7QUFDbEQsNkRBQW9GO0FBQ3BGLDJCQUFnRDtBQUNoRCx5Q0FBd0M7QUFFeEMsU0FBZ0IsbUNBQW1DLENBQUMsUUFBZ0I7SUFDbEUsTUFBTSxZQUFZLEdBQUcsY0FBTyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNuRCxNQUFNLFVBQVUsR0FBRyxjQUFPLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLENBQUE7SUFFL0QsTUFBTSxjQUFjLEdBQUcsZ0NBQXVCLENBQUMscUNBQW9CLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUNoSCxNQUFNLGFBQWEsR0FBRyxnQ0FBdUIsQ0FBQyxvQ0FBbUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBRTlHLE1BQU0sWUFBWSxHQUFHLGNBQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixDQUFDLENBQUE7SUFDNUUsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxpQkFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDMUUsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUE7SUFFNUQsa0JBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDckMsQ0FBQztBQVpELGtGQVlDO0FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtJQUMzQixtQ0FBbUMsQ0FBQyxjQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7Q0FDbEYiLCJmaWxlIjoiZG9jcy90ZW1wbGF0ZS1zdHJpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoQykgMjAxOCBHYXJkZW4gVGVjaG5vbG9naWVzLCBJbmMuIDxpbmZvQGdhcmRlbi5pbz5cbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICovXG5cbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiXG5pbXBvcnQgeyByZW5kZXJTY2hlbWFEZXNjcmlwdGlvbiB9IGZyb20gXCIuL2NvbmZpZ1wiXG5pbXBvcnQgeyBQcm9qZWN0Q29uZmlnQ29udGV4dCwgTW9kdWxlQ29uZmlnQ29udGV4dCB9IGZyb20gXCIuLi9jb25maWcvY29uZmlnLWNvbnRleHRcIlxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSBcImZzXCJcbmltcG9ydCAqIGFzIGhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUZW1wbGF0ZVN0cmluZ1JlZmVyZW5jZURvY3MoZG9jc1Jvb3Q6IHN0cmluZykge1xuICBjb25zdCByZWZlcmVuY2VEaXIgPSByZXNvbHZlKGRvY3NSb290LCBcInJlZmVyZW5jZVwiKVxuICBjb25zdCBvdXRwdXRQYXRoID0gcmVzb2x2ZShyZWZlcmVuY2VEaXIsIFwidGVtcGxhdGUtc3RyaW5ncy5tZFwiKVxuXG4gIGNvbnN0IHByb2plY3RDb250ZXh0ID0gcmVuZGVyU2NoZW1hRGVzY3JpcHRpb24oUHJvamVjdENvbmZpZ0NvbnRleHQuZ2V0U2NoZW1hKCkuZGVzY3JpYmUoKSwgeyByZXF1aXJlZDogZmFsc2UgfSlcbiAgY29uc3QgbW9kdWxlQ29udGV4dCA9IHJlbmRlclNjaGVtYURlc2NyaXB0aW9uKE1vZHVsZUNvbmZpZ0NvbnRleHQuZ2V0U2NoZW1hKCkuZGVzY3JpYmUoKSwgeyByZXF1aXJlZDogZmFsc2UgfSlcblxuICBjb25zdCB0ZW1wbGF0ZVBhdGggPSByZXNvbHZlKF9fZGlybmFtZSwgXCJ0ZW1wbGF0ZXNcIiwgXCJ0ZW1wbGF0ZS1zdHJpbmdzLmhic1wiKVxuICBjb25zdCB0ZW1wbGF0ZSA9IGhhbmRsZWJhcnMuY29tcGlsZShyZWFkRmlsZVN5bmModGVtcGxhdGVQYXRoKS50b1N0cmluZygpKVxuICBjb25zdCBtYXJrZG93biA9IHRlbXBsYXRlKHsgcHJvamVjdENvbnRleHQsIG1vZHVsZUNvbnRleHQgfSlcblxuICB3cml0ZUZpbGVTeW5jKG91dHB1dFBhdGgsIG1hcmtkb3duKVxufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgZ2VuZXJhdGVUZW1wbGF0ZVN0cmluZ1JlZmVyZW5jZURvY3MocmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi5cIiwgXCIuLlwiLCBcIi4uXCIsIFwiZG9jc1wiKSlcbn1cbiJdfQ==
