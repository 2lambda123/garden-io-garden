"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const handlebars = require("handlebars");
const js_yaml_1 = require("js-yaml");
const linewrap = require("linewrap");
const Joi = require("joi");
const path_1 = require("path");
const lodash_1 = require("lodash");
const container_1 = require("../plugins/container");
const generic_1 = require("../plugins/generic");
const base_1 = require("../config/base");
const module_1 = require("../config/module");
const maxWidth = 100;
const builtInModuleTypes = [
    { name: "generic", schema: generic_1.genericModuleSpecSchema },
    { name: "container", schema: container_1.containerModuleSpecSchema },
];
function renderCommentDescription(description, width, { required }) {
    const output = [];
    const meta = [];
    if (description.description) {
        output.push(description.description);
    }
    if (description.examples && description.examples.length) {
        const example = description.examples[0];
        if (description.type === "object" || description.type === "array") {
            meta.push("Example:", ...indent(js_yaml_1.safeDump(example).trim().split("\n"), 1), "");
        }
        else {
            meta.push("Example: " + JSON.stringify(example), "");
        }
    }
    const allowOnly = lodash_1.get(description, "flags.allowOnly") === true;
    if (required) {
        const presenceRequired = lodash_1.get(description, "flags.presence") === "required";
        if (presenceRequired || allowOnly) {
            meta.push("Required.");
        }
        else if (output.length) {
            meta.push("Optional.");
        }
    }
    if (allowOnly) {
        meta.push("Allowed values: " + description.valids.map(v => JSON.stringify(v)).join(", "));
    }
    if (meta.length > 0) {
        output.push("", ...meta);
    }
    if (output.length === 0) {
        return output;
    }
    const wrap = linewrap(width - 2, { whitespace: "line" });
    return wrap(output.join("\n")).split("\n").map(line => "# " + line);
}
function getDefaultValue(description) {
    const defaultSpec = lodash_1.get(description, "flags.default");
    if (defaultSpec === undefined) {
        return;
    }
    else if (defaultSpec && defaultSpec.function) {
        return defaultSpec.function();
    }
    else {
        return defaultSpec;
    }
}
function indent(lines, level) {
    const prefix = lodash_1.padEnd("", level * 2, " ");
    return lines.map(line => prefix + line);
}
function indentFromSecondLine(lines, level) {
    return [...lines.slice(0, 1), ...indent(lines.slice(1), level)];
}
function renderSchemaDescription(description, opts) {
    const { level = 0 } = opts;
    const indentSpaces = level * 2;
    const descriptionWidth = maxWidth - indentSpaces - 2;
    const output = [];
    const defaultValue = getDefaultValue(description);
    switch (description.type) {
        case "object":
            const children = Object.entries(description.children || {});
            if (!children.length) {
                if (defaultValue) {
                    output.push("", ...js_yaml_1.safeDump(defaultValue).trim().split("\n"));
                }
                else {
                    output.push("{}");
                }
                break;
            }
            output.push("");
            for (const [key, keyDescription] of children) {
                if (lodash_1.get(keyDescription, "meta[0].internal")) {
                    continue;
                }
                output.push(...renderCommentDescription(keyDescription, descriptionWidth, opts), `${key}: ${renderSchemaDescription(keyDescription, Object.assign({}, opts, { level: level + 1 }))}`, "");
            }
            output.pop();
            break;
        case "array":
            if (!description.items.length) {
                output.push("[]");
            }
            const itemDescription = description.items[0];
            output.push("", ...renderCommentDescription(itemDescription, descriptionWidth, opts), "- " + renderSchemaDescription(itemDescription, Object.assign({}, opts, { level: level + 1 })).trim(), "");
            break;
        default:
            output.push(defaultValue === undefined ? "" : defaultValue + "");
    }
    // we don't indent the first line
    return indentFromSecondLine(output, level)
        .map(line => line.trimRight())
        .join("\n");
}
exports.renderSchemaDescription = renderSchemaDescription;
function generateConfigReferenceDocs(docsRoot) {
    const referenceDir = path_1.resolve(docsRoot, "reference");
    const outputPath = path_1.resolve(referenceDir, "config.md");
    const yaml = renderSchemaDescription(base_1.configSchema.describe(), { required: true });
    const moduleTypes = builtInModuleTypes.map(({ name, schema }) => {
        schema = Joi.object().keys({
            module: module_1.baseModuleSpecSchema.concat(schema),
        });
        return {
            name,
            yaml: renderSchemaDescription(schema.describe(), { required: true }),
        };
    });
    const templatePath = path_1.resolve(__dirname, "templates", "config.hbs");
    const template = handlebars.compile(fs_1.readFileSync(templatePath).toString());
    const markdown = template({ yaml, moduleTypes });
    fs_1.writeFileSync(outputPath, markdown);
}
exports.generateConfigReferenceDocs = generateConfigReferenceDocs;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
