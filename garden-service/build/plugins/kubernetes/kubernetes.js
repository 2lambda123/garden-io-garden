"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Joi = require("joi");
const dedent = require("dedent");
const common_1 = require("../../config/common");
const project_1 = require("../../config/project");
const actions_1 = require("./actions");
const deployment_1 = require("./deployment");
const helm_1 = require("./helm");
const secrets_1 = require("./secrets");
const container_1 = require("../container");
const init_1 = require("./init");
exports.name = "kubernetes";
exports.k8sContextSchema = Joi.string()
    .required()
    .description("The kubectl context to use to connect to the Kubernetes cluster.")
    .example("my-dev-context");
const secretRef = Joi.object()
    .keys({
    name: common_1.joiIdentifier()
        .required()
        .description("The name of the Kubernetes secret.")
        .example("my-secret"),
    namespace: common_1.joiIdentifier()
        .default("default")
        .description("The namespace where the secret is stored. " +
        "If necessary, the secret may be copied to the appropriate namespace before use."),
})
    .description("Reference to a Kubernetes secret.");
const imagePullSecretsSchema = common_1.joiArray(secretRef)
    .description(dedent `
    References to \`docker-registry\` secrets to use for authenticating with remote registries when pulling
    images. This is necessary if you reference private images in your module configuration, and is required
    when configuring a remote Kubernetes environment.
  `);
const tlsCertificateSchema = Joi.object()
    .keys({
    name: common_1.joiIdentifier()
        .required()
        .description("A unique identifier for this certificate.")
        .example("www")
        .example("wildcard"),
    hostnames: Joi.array().items(Joi.string().hostname())
        .description("A list of hostnames that this certificate should be used for. " +
        "If you don't specify these, they will be automatically read from the certificate.")
        .example(["www.mydomain.com"]),
    secretRef: secretRef
        .description("A reference to the Kubernetes secret that contains the TLS certificate and key for the domain.")
        .example({ name: "my-tls-secret", namespace: "default" }),
});
exports.kubernetesConfigBase = project_1.providerConfigBaseSchema
    .keys({
    defaultHostname: Joi.string()
        .description("A default hostname to use when no hostname is explicitly configured for a service.")
        .example("api.mydomain.com"),
    defaultUsername: common_1.joiIdentifier()
        .description("Set a default username (used for namespacing within a cluster)."),
    forceSsl: Joi.boolean()
        .default(false)
        .description("Require SSL on all services. If set to true, an error is raised when no certificate " +
        "is available for a configured hostname."),
    imagePullSecrets: imagePullSecretsSchema,
    namespace: Joi.string()
        .description("Specify which namespace to deploy services to (auto-generated by default). " +
        "Note that the framework generates other namespaces as well with this name as a prefix."),
    tlsCertificates: common_1.joiArray(tlsCertificateSchema)
        .unique("name")
        .description("One or more certificates to use for ingress."),
});
const configSchema = exports.kubernetesConfigBase
    .keys({
    context: exports.k8sContextSchema
        .required(),
    deploymentRegistry: container_1.containerRegistryConfigSchema,
    ingressClass: Joi.string()
        .default("nginx")
        .description(dedent `
        The ingress class to use on configured Ingresses when deploying services. **Note that Garden
        currently only supports the nginx ingress controller.**
      `),
    ingressHttpPort: Joi.number()
        .default(80)
        .description("The external HTTP port of the cluster's ingress controller."),
    ingressHttpsPort: Joi.number()
        .default(443)
        .description("The external HTTPS port of the cluster's ingress controller."),
    _system: Joi.any().meta({ internal: true }),
});
function gardenPlugin({ config }) {
    config = common_1.validate(config, configSchema, { context: "kubernetes provider config" });
    return {
        config,
        actions: {
            getEnvironmentStatus: init_1.getRemoteEnvironmentStatus,
            prepareEnvironment: init_1.prepareRemoteEnvironment,
            cleanupEnvironment: init_1.cleanupEnvironment,
            getSecret: secrets_1.getSecret,
            setSecret: secrets_1.setSecret,
            deleteSecret: secrets_1.deleteSecret,
        },
        moduleActions: {
            container: {
                getServiceStatus: deployment_1.getContainerServiceStatus,
                deployService: deployment_1.deployContainerService,
                deleteService: actions_1.deleteService,
                getServiceOutputs: actions_1.getServiceOutputs,
                execInService: actions_1.execInService,
                pushModule: deployment_1.pushModule,
                runModule: actions_1.runModule,
                testModule: actions_1.testModule,
                runService: actions_1.runService,
                getTestResult: actions_1.getTestResult,
                getServiceLogs: actions_1.getServiceLogs,
            },
            helm: helm_1.helmHandlers,
        },
    };
}
exports.gardenPlugin = gardenPlugin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
