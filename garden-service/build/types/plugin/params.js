"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_context_1 = require("../../plugin-context");
const base_1 = require("../../vcs/base");
const common_1 = require("../../config/common");
const module_1 = require("../module");
const service_1 = require("../service");
const outputs_1 = require("./outputs");
const Joi = require("joi");
const module_2 = require("../../config/module");
const test_1 = require("../../config/test");
// Note: not specifying this further because we will later remove it from the API
const logEntrySchema = Joi.object()
    .description("Logging context handler that the handler can use to log messages and progress.");
const actionParamsSchema = Joi.object()
    .keys({
    ctx: plugin_context_1.pluginContextSchema
        .required(),
    logEntry: logEntrySchema,
});
const moduleActionParamsSchema = actionParamsSchema
    .keys({
    module: module_1.moduleSchema,
});
const serviceActionParamsSchema = moduleActionParamsSchema
    .keys({
    runtimeContext: service_1.runtimeContextSchema
        .optional(),
    service: service_1.serviceSchema,
});
exports.describeModuleTypeParamsSchema = Joi.object()
    .keys({});
exports.validateModuleParamsSchema = Joi.object()
    .keys({
    ctx: plugin_context_1.pluginContextSchema
        .required(),
    logEntry: logEntrySchema,
    moduleConfig: module_2.moduleConfigSchema
        .required(),
});
exports.getEnvironmentStatusParamsSchema = actionParamsSchema;
exports.prepareEnvironmentParamsSchema = actionParamsSchema
    .keys({
    status: outputs_1.environmentStatusSchema,
    force: Joi.boolean()
        .description("Force re-configuration of the environment."),
});
exports.cleanupEnvironmentParamsSchema = actionParamsSchema;
exports.getSecretParamsSchema = actionParamsSchema
    .keys({
    key: Joi.string()
        .description("A unique identifier for the secret."),
});
exports.setSecretParamsSchema = exports.getSecretParamsSchema
    .keys({
    value: common_1.joiPrimitive()
        .description("The value of the secret."),
});
exports.deleteSecretParamsSchema = exports.getSecretParamsSchema;
exports.getBuildStatusParamsSchema = moduleActionParamsSchema;
exports.buildModuleParamsSchema = moduleActionParamsSchema;
exports.pushModuleParamsSchema = moduleActionParamsSchema;
exports.publishModuleParamsSchema = moduleActionParamsSchema;
const runBaseParams = {
    interactive: Joi.boolean()
        .description("Whether to run the module interactively (i.e. attach to the terminal)."),
    runtimeContext: service_1.runtimeContextSchema,
    silent: Joi.boolean()
        .description("Set to false if the output should not be logged to the console."),
    timeout: Joi.number()
        .optional()
        .description("If set, how long to run the command before timing out."),
};
const runModuleBaseSchema = moduleActionParamsSchema
    .keys(runBaseParams);
exports.runModuleParamsSchema = runModuleBaseSchema
    .keys({
    command: common_1.joiArray(Joi.string())
        .description("The command to run in the module."),
});
exports.testModuleParamsSchema = runModuleBaseSchema
    .keys({
    testConfig: test_1.testConfigSchema,
});
exports.getTestResultParamsSchema = moduleActionParamsSchema
    .keys({
    testName: Joi.string()
        .description("A unique name to identify the test run."),
    version: base_1.moduleVersionSchema,
});
exports.getServiceStatusParamsSchema = serviceActionParamsSchema
    .keys({
    runtimeContext: service_1.runtimeContextSchema,
});
exports.deployServiceParamsSchema = serviceActionParamsSchema
    .keys({
    force: Joi.boolean()
        .description("Whether to force a re-deploy, even if the service is already deployed."),
    runtimeContext: service_1.runtimeContextSchema,
});
exports.deleteServiceParamsSchema = serviceActionParamsSchema
    .keys({
    runtimeContext: service_1.runtimeContextSchema,
});
exports.getServiceOutputsParamsSchema = serviceActionParamsSchema;
exports.execInServiceParamsSchema = serviceActionParamsSchema
    .keys({
    command: common_1.joiArray(Joi.string())
        .description("The command to run alongside the service."),
    runtimeContext: service_1.runtimeContextSchema,
});
exports.getServiceLogsParamsSchema = serviceActionParamsSchema
    .keys({
    runtimeContext: service_1.runtimeContextSchema,
    stream: Joi.object()
        .description("A Stream object, to write the logs to."),
    tail: Joi.boolean()
        .description("Whether to keep listening for logs until aborted."),
    startTime: Joi.date()
        .optional()
        .description("If set, only return logs that are as new or newer than this date."),
});
exports.runServiceParamsSchema = serviceActionParamsSchema
    .keys(runBaseParams);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
