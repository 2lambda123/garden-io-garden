"use strict";
/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Joi = require("joi");
const base_1 = require("../../vcs/base");
const module_1 = require("../../config/module");
exports.environmentStatusSchema = Joi.object()
    .keys({
    ready: Joi.boolean()
        .required()
        .description("Set to true if the environment is fully configured for a provider."),
    needUserInput: Joi.boolean()
        .description("Set to true if the environment needs user input to be initialized, " +
        "and thus needs to be initialized via `garden init`."),
    detail: Joi.object()
        .meta({ extendable: true })
        .description("Use this to include additional information that is specific to the provider."),
})
    .description("Description of an environment's status for a provider.");
exports.prepareEnvironmentResultSchema = Joi.object().keys({});
exports.cleanupEnvironmentResultSchema = Joi.object().keys({});
exports.getSecretResultSchema = Joi.object()
    .keys({
    value: Joi.string()
        .allow(null)
        .required()
        .description("The config value found for the specified key (as string), or null if not found."),
});
exports.setSecretResultSchema = Joi.object().keys({});
exports.deleteSecretResultSchema = Joi.object()
    .keys({
    found: Joi.boolean()
        .required()
        .description("Set to true if the key was deleted, false if it was not found."),
});
exports.execInServiceResultSchema = Joi.object()
    .keys({
    code: Joi.number()
        .required()
        .description("The exit code of the command executed in the service container."),
    output: Joi.string()
        .required()
        .description("The output of the executed command."),
    stdout: Joi.string()
        .description("The stdout output of the executed command (if available)."),
    stderr: Joi.string()
        .description("The stderr output of the executed command (if available)."),
});
exports.serviceLogEntrySchema = Joi.object()
    .keys({
    serviceName: Joi.string()
        .required()
        .description("The name of the service the log entry originated from."),
    timestamp: Joi.date()
        .required()
        .description("The time when the log entry was generated by the service."),
    msg: Joi.string()
        .required()
        .description("The content of the log entry."),
})
    .description("A log entry returned by a getServiceLogs action handler.");
exports.getServiceLogsResultSchema = Joi.object().keys({});
exports.moduleTypeDescriptionSchema = Joi.object()
    .keys({
    docs: Joi.string()
        .required()
        .description("Documentation for the module type, in markdown format."),
    schema: Joi.object()
        .required()
        .description("A valid OpenAPI schema describing the configuration keys for the `module` field in the module's `garden.yml`."),
});
exports.validateModuleResultSchema = module_1.moduleConfigSchema;
exports.buildModuleResultSchema = Joi.object()
    .keys({
    buildLog: Joi.string()
        .allow("")
        .description("The full log from the build."),
    fetched: Joi.boolean()
        .description("Set to true if the build was fetched from a remote registry."),
    fresh: Joi.boolean()
        .description("Set to true if the build was perfomed, false if it was already built, or fetched from a registry"),
    version: Joi.string()
        .description("The version that was built."),
    details: Joi.object()
        .description("Additional information, specific to the provider."),
});
exports.pushModuleResultSchema = Joi.object()
    .keys({
    pushed: Joi.boolean()
        .required()
        .description("Set to true if the module was pushed."),
    message: Joi.string()
        .description("Optional result message."),
});
exports.publishModuleResultSchema = Joi.object()
    .keys({
    published: Joi.boolean()
        .required()
        .description("Set to true if the module was published."),
    message: Joi.string()
        .description("Optional result message."),
});
exports.runResultSchema = Joi.object()
    .keys({
    moduleName: Joi.string()
        .description("The name of the module that was run."),
    command: Joi.array().items(Joi.string())
        .required()
        .description("The command that was run in the module."),
    version: base_1.moduleVersionSchema,
    success: Joi.boolean()
        .required()
        .description("Whether the module was successfully run."),
    startedAt: Joi.date()
        .required()
        .description("When the module run was started."),
    completedAt: Joi.date()
        .required()
        .description("When the module run was completed."),
    output: Joi.string()
        .required()
        .allow("")
        .description("The output log from the run."),
});
exports.testResultSchema = exports.runResultSchema
    .keys({
    testName: Joi.string()
        .required()
        .description("The name of the test that was run."),
});
exports.getTestResultSchema = exports.testResultSchema.allow(null);
exports.buildStatusSchema = Joi.object()
    .keys({
    ready: Joi.boolean()
        .required()
        .description("Whether an up-to-date build is ready for the module."),
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
